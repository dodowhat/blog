<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>张良计</title>
    <link>/</link>
    <description>张良计</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 19 Mar 2020 00:00:31 +0800</lastBuildDate>
    
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自用 RSS 服务搭建 (Miniflux &#43; RSSHub)</title>
      <link>/posts/rss-service-deployment-via-docker-on-ubuntu/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:31 +0800</pubDate>
      
      <guid>/posts/rss-service-deployment-via-docker-on-ubuntu/</guid>
      <description>&lt;p&gt;互联网越来越分裂，巨头们各自圈地，糟糕的用户体验，漫天飞舞的广告，让人不堪忍受。&lt;/p&gt;
&lt;p&gt;好在总有各路大神们来解决痛点，RSSHub 就是其中之一。&lt;/p&gt;
&lt;p&gt;RSSHub 是一个开源易用的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源，官网有详细介绍，链接在文章底部。&lt;/p&gt;
&lt;p&gt;Miniflux 是一个网页版 RSS 阅读器，简洁干净。&lt;/p&gt;
&lt;p&gt;本文主要记录 Miniflux + RSSHub 的搭建过程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;VPS 初始化以及 Docker 安装参考这篇文章 &lt;a href=&#34;/posts/ubuntu-server-initiation-and-docker-installation&#34;&gt;Ubuntu VPS 初始化设置 + Docker安装&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;部署-miniflux&#34;&gt;部署 Miniflux&lt;/h2&gt;
&lt;p&gt;新建 Docker Compose 配置文件，保存为 &lt;code&gt;docker-compose-miniflux.yml&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;3&#39;
services:
  miniflux:
    image: miniflux/miniflux:latest
    ports:
      - &amp;quot;8080:8080&amp;quot;
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable
  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=secret
    volumes:
      - miniflux-db:/var/lib/postgresql/data
volumes:
  miniflux-db:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动服务:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker-compose -f docker-compose-miniflux.yml up -d db
$ sudo docker-compose -f docker-compose-miniflux.yml up -d miniflux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始化数据库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose-miniflux.yml exec miniflux /usr/bin/miniflux -migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建用户，根据提示输入用户名及密码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose -f docker-compose-miniflux.yml exec miniflux /usr/bin/miniflux -create-admin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;部署完成，现在可以访问 &lt;code&gt;http://your-vps-ip:8080&lt;/code&gt; 使用了。&lt;/p&gt;
&lt;h2 id=&#34;部署-rsshub&#34;&gt;部署 RSSHub&lt;/h2&gt;
&lt;p&gt;下载官方 Docker Compose 配置，保存为 &lt;code&gt;docker-compose-rsshub.yml&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml -o docker-compose-rsshub.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建 volume 持久化 Redis 缓存:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker volume create redis-data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker-compose -f docker-compse-rsshub.yml up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;部署完成，现在可以访问 &lt;code&gt;http://your-vps-ip:1200&lt;/code&gt; 使用了。&lt;/p&gt;
&lt;h2 id=&#34;配置-nginx-端口转发使用域名访问&#34;&gt;配置 Nginx 端口转发，使用域名访问&lt;/h2&gt;
&lt;p&gt;解析域名到你的 VPS ，假设域名分别为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rss.example.com  # Miniflux
rsshub.example.com  # RSSHub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 Nginx :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install -y nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先简单修改下默认配置:&lt;/p&gt;
&lt;p&gt;禁用 &lt;code&gt;IP&lt;/code&gt; 直接访问，编辑 &lt;code&gt;/etc/nginx/site-available/default&lt;/code&gt; ，注释掉 &lt;code&gt;location {}&lt;/code&gt; ，接着写入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return 404;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;隐藏 &lt;code&gt;404&lt;/code&gt; 页面版本号，编辑 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; ，在 &lt;code&gt;http {}&lt;/code&gt; 中写入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server_tokens off;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置端口转发及域名访问，新建配置文件 &lt;code&gt;/etc/nginx/site-available/rss.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Miniflux
server {
    listen 80;
    server_name rss.example.com;
    index index.html;
    location / {
        proxy_pass http://127.0.0.1:8080;
    }
}

# RSSHub
server {
    listen 80;
    server_name rsshub.example.com;
    index index.html;
    location / {
        proxy_pass http://127.0.0.1:1200;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启用配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ln -s /etc/nginx/site-available/rss.conf /etc/ngxin/site-enabled/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启服务:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在可以用域名访问了。&lt;/p&gt;
&lt;h2 id=&#34;使用-acmesh-签发-lets-encrypt-证书&#34;&gt;使用 acme.sh 签发 Let&amp;rsquo;s Encrypt 证书&lt;/h2&gt;
&lt;p&gt;以 root 身份安装 acme.sh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo su -
# apt install -y socat
# curl https://get.acme.sh | sh
# source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;签发证书:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# acme.sh --issue --nginx -d rss.example.com
# mkdir ~/rss.example.com
# acme.sh --install-cert -d rss.example.com \
  --fullchain-file ~/rss.example.com/fullchain.pem \
  --key-file ~/rss.example.com/key.pem
  --reloadcmd &amp;quot;service nginx force-reload&amp;quot;

# acme.sh --issue --nginx -d rsshub.example.com
# mkdir ~/rsshub.example.com
# acme.sh --install-cert -d rsshub.example.com \
  --fullchain-file ~/rsshub.example.com/fullchain.pem \
  --key-file ~/rsshub.example.com/key.pem
  --reloadcmd &amp;quot;service nginx force-reload&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置 Nginx HTTPS，编辑 &lt;code&gt;/etc/nginx/site-available/rss.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Miniflux
server {
    listen 80;
    server_name rss.example.com;

    listen 443 ssl;

    ssl_certificate /root/rss.http-404.com/fullchain.pem;
    ssl_certificate_key /root/rss.http-404.com/key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    if ($scheme != &amp;quot;https&amp;quot;) {
      return 301 https://$host$request_uri;
    }

    index index.html;
    location / {
        proxy_pass http://127.0.0.1:8080;
    }
}

# RSSHub
server {
    listen 80;
    server_name rsshub.example.com;

    listen 443 ssl;

    ssl_certificate /root/rsshub.http-404.com/fullchain.pem;
    ssl_certificate_key /root/rsshub.http-404.com/key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    if ($scheme != &amp;quot;https&amp;quot;) {
        return 301 https://$host$request_uri;
    }

    index index.html;
    location / {
        proxy_pass http://127.0.0.1:1200;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在可以用 HTTPS 访问了。&lt;/p&gt;
&lt;p&gt;PS: 配置过程中的一个小插曲，&lt;code&gt;ssl_certificate&lt;/code&gt; 要用 &lt;code&gt;fullchain.pem&lt;/code&gt; ，不要用 &lt;code&gt;cert.pem&lt;/code&gt; ，否则访问可能出现下面的错误:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x509: certificate signed by unknown authority
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置-rsshub-用户认证&#34;&gt;配置 RSSHub 用户认证&lt;/h2&gt;
&lt;p&gt;现在这个建好的 RSSHub 服务是公开的，可以被别人直接访问使用。&lt;/p&gt;
&lt;p&gt;我希望只给自己使用，不被白嫖，所以给它加上用户认证。&lt;/p&gt;
&lt;p&gt;RSSHub 自带 HTTP 基础认证功能，但只给少部分路由开启，不符合我的需求。&lt;/p&gt;
&lt;p&gt;这里我通过配置 Nginx 给所有路由加上 HTTP 基础认证。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;htpasswd&lt;/code&gt; 工具创建用户认证密码文件:&lt;/p&gt;
&lt;p&gt;安装工具:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install apache2-utils
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建用户:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo htpasswd -c /etc/nginx/htpasswd user1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;user1&lt;/code&gt; 是你想要的用户名，随便取，根据提示设定密码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; 参数表示新建密码文件，如果文件已存在，去掉这个参数。&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;/etc/nginx/site-available/rss.conf&lt;/code&gt; ，找到 RSSHub 的 &lt;code&gt;location {}&lt;/code&gt; 部分，修改为:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location / {
    proxy_pass http://127.0.0.1:1200;
    auth_basic &amp;quot;Restricted Content&amp;quot;;
    auth_basic_user_file /etc/nginx/htpasswd;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启 Nginx:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RSSHub 用户认证配置好了。在 Miniflux 中新增订阅时，在 &lt;code&gt;高级选项&lt;/code&gt; 中填写刚才的用户名密码就可以了。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://miniflux.app/docs/installation.html#docker&#34;&gt;Miniflux Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.rsshub.app/install/#docker-compose-bu-shu&#34;&gt;RSSHub 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh&#34;&gt;Acme.sh Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/configuring_https_servers.html&#34;&gt;Nginx Configuring HTTPS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/&#34;&gt;Using Let&amp;rsquo;s Encrypt with Nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/&#34;&gt;Nginx configuring HTTP Basic Authentication&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matrix-org/matrix-federation-tester/issues/59&#34;&gt;x509: certificate signed by unknown authority&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>部署 GOST HTTPS 代理</title>
      <link>/posts/gost-https-proxy-deployment-via-docker-on-ubuntu/</link>
      <pubDate>Wed, 18 Mar 2020 21:38:50 +0800</pubDate>
      
      <guid>/posts/gost-https-proxy-deployment-via-docker-on-ubuntu/</guid>
      <description>&lt;p&gt;随着墙一步步升级，识别能力愈加强大，各路翻墙工具变得步履维艰，自创协议逐渐势微。&lt;/p&gt;
&lt;p&gt;绕了一大圈之后，现在又回到起点，开始在不被封的主流协议上做文章。&lt;/p&gt;
&lt;p&gt;其中比较稳妥的一个就是 HTTPS 代理。&lt;/p&gt;
&lt;p&gt;GOST 是一个GO语言实现的代理工具，官网有详细介绍，链接在文章底部。&lt;/p&gt;
&lt;p&gt;本文主要记录用 GOST 部署 HTTPS 代理服务的过程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;VPS 初始化以及 Docker 安装参考这篇文章 &lt;a href=&#34;/posts/ubuntu-server-initiation-and-docker-installation&#34;&gt;Ubuntu VPS 初始化设置 + Docker安装&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析域名到-vps&#34;&gt;解析域名到 VPS&lt;/h2&gt;
&lt;p&gt;你需要有一个域名，并且将它解析到你的 VPS 上。&lt;/p&gt;
&lt;h2 id=&#34;部署-gost-docker-镜像&#34;&gt;部署 Gost Docker 镜像&lt;/h2&gt;
&lt;p&gt;执行 &lt;code&gt;exit&lt;/code&gt; 返回普通用户。&lt;/p&gt;
&lt;p&gt;创建启动脚本 gost.sh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

## 下面的四个参数需要改成你的
DOMAIN=&amp;quot;example.com&amp;quot;
USER=&amp;quot;username&amp;quot;
PASS=&amp;quot;password&amp;quot;
PORT=443

BIND_IP=0.0.0.0
CERT_DIR=/root/${DOMAIN}
CERT=${CERT_DIR}/${DOMAIN}/fullchain.pem
KEY=${CERT_DIR}/${DOMAIN}/key.pem
sudo docker run -d --name gost \
    -v ${CERT_DIR}:${CERT_DIR}:ro \
    --net=host ginuerzh/gost \
    -L &amp;quot;http2://${USER}:${PASS}@${BIND_IP}:${PORT}?cert=${CERT}&amp;amp;key=${KEY}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动服务:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x gost.sh
$ ./gost.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启服务:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker stop gost
$ sudo docker rm gost
$ ./gost.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先不要启动服务，因为证书还没有生成。&lt;/p&gt;
&lt;h2 id=&#34;使用-acmesh-签发-lets-encrypt-证书&#34;&gt;使用 acme.sh 签发 Let&amp;rsquo;s Encrypt 证书&lt;/h2&gt;
&lt;p&gt;以 root 身份安装 acme.sh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo su -
# apt install -y socat
# curl https://get.acme.sh | sh
# source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;签发证书:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# acme.sh --issue --standalone -d example.com
# mkdir ~/example.com
# acme.sh --install-cert -d example.com \
  --fullchain-file ~/example.com/fullchain.pem \
  --key-file ~/example.com/key.pem
  --reloadcmd &amp;quot;docker restart gost&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;
&lt;p&gt;PC 推荐用 Clash for Windows，下载地址:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Fndroid/clash_for_windows_pkg/releases&#34;&gt;Github Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android 推荐用 Clash for Android，下载地址:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Kr328/ClashForAndroid/releases&#34;&gt;Github Release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.github.kr328.clash&#34;&gt;Google Play&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以用 Surfboard，兼容 Surge 配置文件，下载地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://apkpure.com/surfboard/com.getsurfboard&#34;&gt;APK&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.getsurfboard&#34;&gt;Google Play&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS 推荐用 ShadowRocket / Surge ，ShadowRocket 兼容 Surge 配置文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;美区 Apple Store 搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/acmesh-official/acme.sh&#34;&gt;Acme.sh Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haoel.github.io/&#34;&gt;科学上网-左耳朵&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ginuerzh.xyz/gost/tls/&#34;&gt;Gost 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://manual.nssurge.com/&#34;&gt;Surge Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://manual.getsurfboard.com/&#34;&gt;Surfbloard 官网&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu Server 初始化设置 &#43; Docker 安装</title>
      <link>/posts/ubuntu-server-initiation-and-docker-installation/</link>
      <pubDate>Tue, 17 Mar 2020 21:14:08 +0800</pubDate>
      
      <guid>/posts/ubuntu-server-initiation-and-docker-installation/</guid>
      <description>&lt;p&gt;本文主要记录 Ubuntu Server 的一些初始化操作。&lt;/p&gt;
&lt;p&gt;适用于本机、虚拟机、VPS 云主机等等创建后初次运行时参考，方便后续维护使用。&lt;/p&gt;
&lt;p&gt;包括：新增普通权限用户、配置SSH密钥登录、Docker 安装。&lt;/p&gt;
&lt;p&gt;关于普通权限用户，有些运营商的云主机创建后已自动配置好，不需要自己操作了，如 GCE(Google Compute Engine), EC2(Amazon EC2)等等。&lt;/p&gt;
&lt;p&gt;有些运营商则只有 root 用户，如：阿里云。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面以阿里云为例。&lt;/p&gt;
&lt;p&gt;首先，登录root用户。&lt;/p&gt;
&lt;h2 id=&#34;更新系统&#34;&gt;更新系统:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;root# apt update &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;新增普通用户&#34;&gt;新增普通用户:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;root# adduser user1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为新用户配置sudo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root# update-alternatives --config editor # 变更默认文本编辑器(非必要步骤)
root# visudo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加新行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user1 ALL=(ALL) NOPASSWD: ALL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换至新用户:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root# su - user1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导入SSH密钥:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir ~/.ssh
$ vim ~/.ssh/authorized_keys  # 写入公钥，格式(单行)：ssh-rsa your_public_key
$ chmod 700 ~/.ssh
$ chmod 644 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更新SSH配置，禁用root远程登录以及密码登录:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到以下内容并在行首加#号注释掉:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PermitRootLogin yes  # 允许root远程登录
PasswordAuthentication yes  # 允许密码登录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启SSH服务:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;配置putty&#34;&gt;配置Putty&lt;/h2&gt;
&lt;p&gt;Connection -&amp;gt; Seconds between keepalives 设为60，防止超时卡死。&lt;/p&gt;
&lt;p&gt;退出登录时使用 &lt;code&gt;Ctrl-D&lt;/code&gt; 或 &lt;code&gt;exit&lt;/code&gt; 命令，不要直接点X关闭，否则连接进程会驻留，占用资源。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;w&lt;/code&gt; 命令查看当前登录用户。&lt;/p&gt;
&lt;p&gt;踢掉某用户:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pkill -kill -t pts/0  # pts/0是w命令输出的TTY列的值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装-docker&#34;&gt;安装 Docker&lt;/h2&gt;
&lt;p&gt;准备工作:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加软件源(二选一):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 官方源
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository \
   &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&amp;quot;

# 国内源
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository \
   &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install docker-ce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果想要以普通用户使用 Docker，就将用户加入docker组:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo usermod -aG docker user1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 &lt;code&gt;docker-compose&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;&gt;Docker 安装官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker Compose 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html&#34;&gt;Docker 从入门到实践&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>